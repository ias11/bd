import java.io.IOException;
import java.util.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapred.*;
public class TransactionCount {
	public static class Map extends MapReduceBase implements Mapper<LongWritable, Text, Text, IntWritable> 
	{
		private final static IntWritable one = new IntWritable(1);
		//private Text word = new Text();
		public void map(LongWritable key, Text value, OutputCollector<Text,IntWritable> output, Reporter reporter) throws IOException 
		{
			String myString = value.toString();
			String[] userCount = myString.split(",");
			output.collect(new Text(userCount[2]), new IntWritable(Integer.parseInt(userCount[3])));
		}
	}
	public static class Reduce extends MapReduceBase implements Reducer<Text, IntWritable, Text, IntWritable> 
	{
 		public void reduce(Text key, Iterator<IntWritable> values,OutputCollector<Text, IntWritable> output, Reporter reporter) throws IOException 
		{ 	
 			int finaluserCount = 0 ;
 			Text mykey = key ;
 			while(values.hasNext()) 
			{
 				IntWritable value = values.next(); 
 				finaluserCount += value.get();
 			}
 		output.collect(mykey, new IntWritable(finaluserCount));
 		}
 	}
 	public static void main(String[] args) throws Exception 
	{
 		JobConf conf = new JobConf(TransactionCount.class);
 		conf.setJobName("transactioncount");
 		conf.setOutputKeyClass(Text.class);
		conf.setOutputValueClass(IntWritable.class);
		conf.setMapperClass(Map.class);
		conf.setCombinerClass(Reduce.class);
		conf.setReducerClass(Reduce.class);
 		FileInputFormat.setInputPaths(conf, new Path(args[0]));
 		FileOutputFormat.setOutputPath(conf, new Path(args[1]));
 		JobClient.runJob(conf);
 	}
 }
